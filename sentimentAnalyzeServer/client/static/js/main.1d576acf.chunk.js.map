{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","entries","this","props","emotions","map","eventDetails","scope","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","title","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","data","output","style","color","fontSize","catch","error","validateError","sendForEmotionAnalysis","errorData","message","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1d576acf.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n        return (\n            <div>\n                <table className=\"table table-bordered\">\n                    <tbody>\n                        {\n                            Object.entries(this.props.emotions).map(function (eventDetails) {\n                                return (<tr>\n                                    <th scope=\"row\">{eventDetails[0]}</th>\n                                    <td>{eventDetails[1]}</td>\n                                </tr>)\n                            })\n                        }\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n\n}\nexport default EmotionTable;\n","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n    state = {\n        innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n        mode: \"text\",\n        sentimentOutput: [],\n        sentiment: true\n    }\n    title = \"Sentiment Analyzer\";\n\n    renderTextArea = () => {\n        document.getElementById(\"textinput\").value = \"\";\n        if (this.state.mode === \"url\") {\n            this.setState({\n                innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n                mode: \"text\",\n                sentimentOutput: [],\n                sentiment: true\n            })\n        }\n    }\n\n    renderTextBox = () => {\n        document.getElementById(\"textinput\").value = \"\";\n        if (this.state.mode === \"text\") {\n            this.setState({\n                innercomp: <textarea rows=\"1\" cols=\"50\" id=\"textinput\" />,\n                mode: \"url\",\n                sentimentOutput: [],\n                sentiment: true\n            })\n        }\n    }\n\n    sendForSentimentAnalysis = () => {\n        this.setState({ sentiment: true });\n        let ret = \"\";\n        let url = \".\";\n\n        if (this.state.mode === \"url\") {\n            url = url + \"/url/sentiment?url=\" + document.getElementById(\"textinput\").value;\n        } else {\n            url = url + \"/text/sentiment?text=\" + document.getElementById(\"textinput\").value;\n        }\n        ret = axios.get(url);\n        ret.then((response) => {\n\n            //Include code here to check the sentiment and fomrat the data accordingly\n\n            this.setState({ sentimentOutput: response.data });\n            let output = response.data;\n            if (response.data === \"positive\") {\n                output = <div style={{ color: \"green\", fontSize: 20 }}>{response.data}</div>\n            } else if (response.data === \"negative\") {\n                output = <div style={{ color: \"red\", fontSize: 20 }}>{response.data}</div>\n            } else {\n                output = <div style={{ color: \"orange\", fontSize: 20 }}>{response.data}</div>\n            }\n            this.setState({ sentimentOutput: output });\n        }).catch(error => {\n            this.setState({ sentimentOutput: <div style={{ color: \"red\", fontSize: 20 }}> {this.validateError(error)} </div> });\n        });\n    }\n\n    sendForEmotionAnalysis = () => {\n        this.setState({ sentiment: false });\n        let ret = \"\";\n        let url = \".\";\n        if (this.state.mode === \"url\") {\n            url = url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\n        } else {\n            url = url + \"/text/emotion/?text=\" + document.getElementById(\"textinput\").value;\n        }\n        ret = axios.get(url);\n\n        ret.then((response) => {\n            if (response.data !== 'Without data') {\n                this.setState({ sentimentOutput: <EmotionTable emotions={response.data} /> });\n            } else {\n                this.setState({ sentimentOutput:  <div style={{ color: \"orange\", fontSize: 20 }}>{response.data}</div>});\n            }\n        }).catch(error => {\n            this.setState({ sentimentOutput: <div style={{ color: \"red\", fontSize: 20 }}>{this.validateError(error)}</div> });\n        });\n    }\n\n    validateError(error) {\n        var errorData = error.message;\n        if (this.state.mode === \"url\") {\n            errorData += \" Invalid URL\";\n        } else {\n            errorData += \" Unrecognized language\";\n        }\n        return errorData;\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <title>{this.title}</title>\n                <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n                <button className=\"btn btn-dark\" onClick={this.renderTextBox}>URL</button>\n                <br /><br />\n                {this.state.innercomp}\n                <br />\n                <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n                <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n                <br />\n                {this.state.sentimentOutput}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}